<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="me.feelwith.business.data.dao.WorkcommentMapper" >
  <resultMap id="BaseResultMap" type="me.feelwith.business.data.dao.entity.Workcomment" >
    <id column="CommentId" property="commentId" jdbcType="INTEGER" />
    <result column="WorkId" property="workId" jdbcType="INTEGER" />
    <result column="Content" property="content" jdbcType="VARCHAR" />
    <result column="UserId" property="userId" jdbcType="INTEGER" />
    <result column="RefCommentId" property="refCommentId" jdbcType="INTEGER" />
    <result column="RefUserId" property="refUserId" jdbcType="INTEGER" />
    <result column="Likes" property="likes" jdbcType="INTEGER" />
    <result column="CreateTime" property="createTime" jdbcType="TIMESTAMP" />
    <result column="VerifyStatus" property="verifyStatus" jdbcType="TINYINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    CommentId, WorkId, Content, UserId, RefCommentId, RefUserId, Likes, CreateTime, VerifyStatus
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="me.feelwith.business.data.dao.entity.WorkcommentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from workcomment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limit != null" >
      <if test="offset != null" >
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null" >
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from workcomment
    where CommentId = #{commentId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from workcomment
    where CommentId = #{commentId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="me.feelwith.business.data.dao.entity.WorkcommentExample" >
    delete from workcomment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="me.feelwith.business.data.dao.entity.Workcomment" >
    insert into workcomment (CommentId, WorkId, Content, 
      UserId, RefCommentId, RefUserId, 
      Likes, CreateTime, VerifyStatus
      )
    values (#{commentId,jdbcType=INTEGER}, #{workId,jdbcType=INTEGER}, #{content,jdbcType=VARCHAR}, 
      #{userId,jdbcType=INTEGER}, #{refCommentId,jdbcType=INTEGER}, #{refUserId,jdbcType=INTEGER}, 
      #{likes,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{verifyStatus,jdbcType=TINYINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="me.feelwith.business.data.dao.entity.Workcomment" >
    insert into workcomment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="commentId != null" >
        CommentId,
      </if>
      <if test="workId != null" >
        WorkId,
      </if>
      <if test="content != null" >
        Content,
      </if>
      <if test="userId != null" >
        UserId,
      </if>
      <if test="refCommentId != null" >
        RefCommentId,
      </if>
      <if test="refUserId != null" >
        RefUserId,
      </if>
      <if test="likes != null" >
        Likes,
      </if>
      <if test="createTime != null" >
        CreateTime,
      </if>
      <if test="verifyStatus != null" >
        VerifyStatus,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="commentId != null" >
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="workId != null" >
        #{workId,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="refCommentId != null" >
        #{refCommentId,jdbcType=INTEGER},
      </if>
      <if test="refUserId != null" >
        #{refUserId,jdbcType=INTEGER},
      </if>
      <if test="likes != null" >
        #{likes,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="verifyStatus != null" >
        #{verifyStatus,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="me.feelwith.business.data.dao.entity.WorkcommentExample" resultType="java.lang.Integer" >
    select count(*) from workcomment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update workcomment
    <set >
      <if test="record.commentId != null" >
        CommentId = #{record.commentId,jdbcType=INTEGER},
      </if>
      <if test="record.workId != null" >
        WorkId = #{record.workId,jdbcType=INTEGER},
      </if>
      <if test="record.content != null" >
        Content = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null" >
        UserId = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.refCommentId != null" >
        RefCommentId = #{record.refCommentId,jdbcType=INTEGER},
      </if>
      <if test="record.refUserId != null" >
        RefUserId = #{record.refUserId,jdbcType=INTEGER},
      </if>
      <if test="record.likes != null" >
        Likes = #{record.likes,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        CreateTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.verifyStatus != null" >
        VerifyStatus = #{record.verifyStatus,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update workcomment
    set CommentId = #{record.commentId,jdbcType=INTEGER},
      WorkId = #{record.workId,jdbcType=INTEGER},
      Content = #{record.content,jdbcType=VARCHAR},
      UserId = #{record.userId,jdbcType=INTEGER},
      RefCommentId = #{record.refCommentId,jdbcType=INTEGER},
      RefUserId = #{record.refUserId,jdbcType=INTEGER},
      Likes = #{record.likes,jdbcType=INTEGER},
      CreateTime = #{record.createTime,jdbcType=TIMESTAMP},
      VerifyStatus = #{record.verifyStatus,jdbcType=TINYINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="me.feelwith.business.data.dao.entity.Workcomment" >
    update workcomment
    <set >
      <if test="workId != null" >
        WorkId = #{workId,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        Content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        UserId = #{userId,jdbcType=INTEGER},
      </if>
      <if test="refCommentId != null" >
        RefCommentId = #{refCommentId,jdbcType=INTEGER},
      </if>
      <if test="refUserId != null" >
        RefUserId = #{refUserId,jdbcType=INTEGER},
      </if>
      <if test="likes != null" >
        Likes = #{likes,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        CreateTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="verifyStatus != null" >
        VerifyStatus = #{verifyStatus,jdbcType=TINYINT},
      </if>
    </set>
    where CommentId = #{commentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="me.feelwith.business.data.dao.entity.Workcomment" >
    update workcomment
    set WorkId = #{workId,jdbcType=INTEGER},
      Content = #{content,jdbcType=VARCHAR},
      UserId = #{userId,jdbcType=INTEGER},
      RefCommentId = #{refCommentId,jdbcType=INTEGER},
      RefUserId = #{refUserId,jdbcType=INTEGER},
      Likes = #{likes,jdbcType=INTEGER},
      CreateTime = #{createTime,jdbcType=TIMESTAMP},
      VerifyStatus = #{verifyStatus,jdbcType=TINYINT}
    where CommentId = #{commentId,jdbcType=INTEGER}
  </update>
</mapper>